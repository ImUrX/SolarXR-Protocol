// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TrackerInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TrackerInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TrackerInfo<'a> {
  type Inner = TrackerInfo<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> TrackerInfo<'a> {
  pub const VT_IMU_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_POLL_RATE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TrackerInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TrackerInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<TrackerInfo<'bldr>> {
    let mut builder = TrackerInfoBuilder::new(_fbb);
    if let Some(x) = args.poll_rate { builder.add_poll_rate(x); }
    builder.add_imu_type(args.imu_type);
    builder.finish()
  }


  #[inline]
  pub fn imu_type(&self) -> super::super::super::datatypes::hardware_info::ImuType {
    self._tab.get::<super::super::super::datatypes::hardware_info::ImuType>(TrackerInfo::VT_IMU_TYPE, Some(super::super::super::datatypes::hardware_info::ImuType::Other)).unwrap()
  }
  /// average samples per second
  #[inline]
  pub fn poll_rate(&self) -> Option<&'a super::super::super::datatypes::HzF32> {
    self._tab.get::<super::super::super::datatypes::HzF32>(TrackerInfo::VT_POLL_RATE, None)
  }
}

impl flatbuffers::Verifiable for TrackerInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::super::super::datatypes::hardware_info::ImuType>("imu_type", Self::VT_IMU_TYPE, false)?
     .visit_field::<super::super::super::datatypes::HzF32>("poll_rate", Self::VT_POLL_RATE, false)?
     .finish();
    Ok(())
  }
}
pub struct TrackerInfoArgs<'a> {
    pub imu_type: super::super::super::datatypes::hardware_info::ImuType,
    pub poll_rate: Option<&'a super::super::super::datatypes::HzF32>,
}
impl<'a> Default for TrackerInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    TrackerInfoArgs {
      imu_type: super::super::super::datatypes::hardware_info::ImuType::Other,
      poll_rate: None,
    }
  }
}

pub struct TrackerInfoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TrackerInfoBuilder<'a, 'b> {
  #[inline]
  pub fn add_imu_type(&mut self, imu_type: super::super::super::datatypes::hardware_info::ImuType) {
    self.fbb_.push_slot::<super::super::super::datatypes::hardware_info::ImuType>(TrackerInfo::VT_IMU_TYPE, imu_type, super::super::super::datatypes::hardware_info::ImuType::Other);
  }
  #[inline]
  pub fn add_poll_rate(&mut self, poll_rate: &super::super::super::datatypes::HzF32) {
    self.fbb_.push_slot_always::<&super::super::super::datatypes::HzF32>(TrackerInfo::VT_POLL_RATE, poll_rate);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TrackerInfoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TrackerInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TrackerInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TrackerInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TrackerInfo");
      ds.field("imu_type", &self.imu_type());
      ds.field("poll_rate", &self.poll_rate());
      ds.finish()
  }
}
