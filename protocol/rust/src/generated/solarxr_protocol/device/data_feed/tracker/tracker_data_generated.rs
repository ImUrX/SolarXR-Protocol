// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TrackerDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TrackerData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TrackerData<'a> {
  type Inner = TrackerData<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> TrackerData<'a> {
  pub const VT_TRACKER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_INFO: flatbuffers::VOffsetT = 6;
  pub const VT_STATUS: flatbuffers::VOffsetT = 8;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 10;
  pub const VT_ACCEL: flatbuffers::VOffsetT = 12;
  pub const VT_MAG_ACCURACY: flatbuffers::VOffsetT = 14;
  pub const VT_TEMP: flatbuffers::VOffsetT = 16;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TrackerData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TrackerDataArgs<'args>
  ) -> flatbuffers::WIPOffset<TrackerData<'bldr>> {
    let mut builder = TrackerDataBuilder::new(_fbb);
    if let Some(x) = args.temp { builder.add_temp(x); }
    builder.add_mag_accuracy(args.mag_accuracy);
    if let Some(x) = args.accel { builder.add_accel(x); }
    if let Some(x) = args.rotation { builder.add_rotation(x); }
    if let Some(x) = args.info { builder.add_info(x); }
    if let Some(x) = args.tracker_id { builder.add_tracker_id(x); }
    builder.add_status(args.status);
    builder.finish()
  }


  #[inline]
  pub fn tracker_id(&self) -> Option<super::super::super::datatypes::TrackerId<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::datatypes::TrackerId>>(TrackerData::VT_TRACKER_ID, None)
  }
  #[inline]
  pub fn info(&self) -> Option<TrackerInfo<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<TrackerInfo>>(TrackerData::VT_INFO, None)
  }
  #[inline]
  pub fn status(&self) -> super::super::super::datatypes::TrackerStatus {
    self._tab.get::<super::super::super::datatypes::TrackerStatus>(TrackerData::VT_STATUS, Some(super::super::super::datatypes::TrackerStatus::NONE)).unwrap()
  }
  #[inline]
  pub fn rotation(&self) -> Option<&'a super::super::super::datatypes::math::Quat> {
    self._tab.get::<super::super::super::datatypes::math::Quat>(TrackerData::VT_ROTATION, None)
  }
  #[inline]
  pub fn accel(&self) -> Option<&'a super::super::super::datatypes::math::Vec3f> {
    self._tab.get::<super::super::super::datatypes::math::Vec3f>(TrackerData::VT_ACCEL, None)
  }
  #[inline]
  pub fn mag_accuracy(&self) -> f32 {
    self._tab.get::<f32>(TrackerData::VT_MAG_ACCURACY, Some(0.0)).unwrap()
  }
  /// Temperature in degrees celsius
  #[inline]
  pub fn temp(&self) -> Option<&'a super::super::super::datatypes::Temperature> {
    self._tab.get::<super::super::super::datatypes::Temperature>(TrackerData::VT_TEMP, None)
  }
}

impl flatbuffers::Verifiable for TrackerData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::datatypes::TrackerId>>("tracker_id", Self::VT_TRACKER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<TrackerInfo>>("info", Self::VT_INFO, false)?
     .visit_field::<super::super::super::datatypes::TrackerStatus>("status", Self::VT_STATUS, false)?
     .visit_field::<super::super::super::datatypes::math::Quat>("rotation", Self::VT_ROTATION, false)?
     .visit_field::<super::super::super::datatypes::math::Vec3f>("accel", Self::VT_ACCEL, false)?
     .visit_field::<f32>("mag_accuracy", Self::VT_MAG_ACCURACY, false)?
     .visit_field::<super::super::super::datatypes::Temperature>("temp", Self::VT_TEMP, false)?
     .finish();
    Ok(())
  }
}
pub struct TrackerDataArgs<'a> {
    pub tracker_id: Option<flatbuffers::WIPOffset<super::super::super::datatypes::TrackerId<'a>>>,
    pub info: Option<flatbuffers::WIPOffset<TrackerInfo<'a>>>,
    pub status: super::super::super::datatypes::TrackerStatus,
    pub rotation: Option<&'a super::super::super::datatypes::math::Quat>,
    pub accel: Option<&'a super::super::super::datatypes::math::Vec3f>,
    pub mag_accuracy: f32,
    pub temp: Option<&'a super::super::super::datatypes::Temperature>,
}
impl<'a> Default for TrackerDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    TrackerDataArgs {
      tracker_id: None,
      info: None,
      status: super::super::super::datatypes::TrackerStatus::NONE,
      rotation: None,
      accel: None,
      mag_accuracy: 0.0,
      temp: None,
    }
  }
}

pub struct TrackerDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TrackerDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_tracker_id(&mut self, tracker_id: flatbuffers::WIPOffset<super::super::super::datatypes::TrackerId<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::datatypes::TrackerId>>(TrackerData::VT_TRACKER_ID, tracker_id);
  }
  #[inline]
  pub fn add_info(&mut self, info: flatbuffers::WIPOffset<TrackerInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<TrackerInfo>>(TrackerData::VT_INFO, info);
  }
  #[inline]
  pub fn add_status(&mut self, status: super::super::super::datatypes::TrackerStatus) {
    self.fbb_.push_slot::<super::super::super::datatypes::TrackerStatus>(TrackerData::VT_STATUS, status, super::super::super::datatypes::TrackerStatus::NONE);
  }
  #[inline]
  pub fn add_rotation(&mut self, rotation: &super::super::super::datatypes::math::Quat) {
    self.fbb_.push_slot_always::<&super::super::super::datatypes::math::Quat>(TrackerData::VT_ROTATION, rotation);
  }
  #[inline]
  pub fn add_accel(&mut self, accel: &super::super::super::datatypes::math::Vec3f) {
    self.fbb_.push_slot_always::<&super::super::super::datatypes::math::Vec3f>(TrackerData::VT_ACCEL, accel);
  }
  #[inline]
  pub fn add_mag_accuracy(&mut self, mag_accuracy: f32) {
    self.fbb_.push_slot::<f32>(TrackerData::VT_MAG_ACCURACY, mag_accuracy, 0.0);
  }
  #[inline]
  pub fn add_temp(&mut self, temp: &super::super::super::datatypes::Temperature) {
    self.fbb_.push_slot_always::<&super::super::super::datatypes::Temperature>(TrackerData::VT_TEMP, temp);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TrackerDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TrackerDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TrackerData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TrackerData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TrackerData");
      ds.field("tracker_id", &self.tracker_id());
      ds.field("info", &self.info());
      ds.field("status", &self.status());
      ds.field("rotation", &self.rotation());
      ds.field("accel", &self.accel());
      ds.field("mag_accuracy", &self.mag_accuracy());
      ds.field("temp", &self.temp());
      ds.finish()
  }
}
