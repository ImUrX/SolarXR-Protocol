// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PoweredOnInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

/// This packet is a standalone broadcasted packet that is sent by the device into the network.
/// It is used for servers to discover this device.
pub struct PoweredOnInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PoweredOnInfo<'a> {
  type Inner = PoweredOnInfo<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> PoweredOnInfo<'a> {
  pub const VT_HARDWARE_INFO: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PoweredOnInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PoweredOnInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<PoweredOnInfo<'bldr>> {
    let mut builder = PoweredOnInfoBuilder::new(_fbb);
    if let Some(x) = args.hardware_info { builder.add_hardware_info(x); }
    builder.finish()
  }


  /// Some hardware information about the device.
  #[inline]
  pub fn hardware_info(&self) -> Option<super::datatypes::hardware_info::HardwareInfo<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<super::datatypes::hardware_info::HardwareInfo>>(PoweredOnInfo::VT_HARDWARE_INFO, None)
  }
}

impl flatbuffers::Verifiable for PoweredOnInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::datatypes::hardware_info::HardwareInfo>>("hardware_info", Self::VT_HARDWARE_INFO, false)?
     .finish();
    Ok(())
  }
}
pub struct PoweredOnInfoArgs<'a> {
    pub hardware_info: Option<flatbuffers::WIPOffset<super::datatypes::hardware_info::HardwareInfo<'a>>>,
}
impl<'a> Default for PoweredOnInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    PoweredOnInfoArgs {
      hardware_info: None,
    }
  }
}

pub struct PoweredOnInfoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PoweredOnInfoBuilder<'a, 'b> {
  #[inline]
  pub fn add_hardware_info(&mut self, hardware_info: flatbuffers::WIPOffset<super::datatypes::hardware_info::HardwareInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::datatypes::hardware_info::HardwareInfo>>(PoweredOnInfo::VT_HARDWARE_INFO, hardware_info);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PoweredOnInfoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PoweredOnInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PoweredOnInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PoweredOnInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PoweredOnInfo");
      ds.field("hardware_info", &self.hardware_info());
      ds.finish()
  }
}
