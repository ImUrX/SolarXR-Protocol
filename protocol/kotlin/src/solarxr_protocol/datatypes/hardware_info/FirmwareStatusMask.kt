// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes.hardware_info

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * A mask of the data in `FirmwareStatus`
 */
@Suppress("unused")
class FirmwareStatusMask : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FirmwareStatusMask {
        __init(_i, _bb)
        return this
    }
    val errorStatus : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val tps : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val ping : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val rssi : Boolean
        get() {
            val o = __offset(10)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val mcuTemp : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val batteryVoltage : Boolean
        get() {
            val o = __offset(14)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val batteryPctEstimate : Boolean
        get() {
            val o = __offset(16)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        fun getRootAsFirmwareStatusMask(_bb: ByteBuffer): FirmwareStatusMask = getRootAsFirmwareStatusMask(_bb, FirmwareStatusMask())
        fun getRootAsFirmwareStatusMask(_bb: ByteBuffer, obj: FirmwareStatusMask): FirmwareStatusMask {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createFirmwareStatusMask(builder: FlatBufferBuilder, errorStatus: Boolean, tps: Boolean, ping: Boolean, rssi: Boolean, mcuTemp: Boolean, batteryVoltage: Boolean, batteryPctEstimate: Boolean) : Int {
            builder.startTable(7)
            addBatteryPctEstimate(builder, batteryPctEstimate)
            addBatteryVoltage(builder, batteryVoltage)
            addMcuTemp(builder, mcuTemp)
            addRssi(builder, rssi)
            addPing(builder, ping)
            addTps(builder, tps)
            addErrorStatus(builder, errorStatus)
            return endFirmwareStatusMask(builder)
        }
        fun startFirmwareStatusMask(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addErrorStatus(builder: FlatBufferBuilder, errorStatus: Boolean) = builder.addBoolean(0, errorStatus, false)
        fun addTps(builder: FlatBufferBuilder, tps: Boolean) = builder.addBoolean(1, tps, false)
        fun addPing(builder: FlatBufferBuilder, ping: Boolean) = builder.addBoolean(2, ping, false)
        fun addRssi(builder: FlatBufferBuilder, rssi: Boolean) = builder.addBoolean(3, rssi, false)
        fun addMcuTemp(builder: FlatBufferBuilder, mcuTemp: Boolean) = builder.addBoolean(4, mcuTemp, false)
        fun addBatteryVoltage(builder: FlatBufferBuilder, batteryVoltage: Boolean) = builder.addBoolean(5, batteryVoltage, false)
        fun addBatteryPctEstimate(builder: FlatBufferBuilder, batteryPctEstimate: Boolean) = builder.addBoolean(6, batteryPctEstimate, false)
        fun endFirmwareStatusMask(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
