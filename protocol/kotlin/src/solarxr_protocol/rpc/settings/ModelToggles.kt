// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc.settings

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Settings for the skeletal model that are toggles.
 */
@Suppress("unused")
class ModelToggles : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ModelToggles {
        __init(_i, _bb)
        return this
    }
    val extendedSpine : Boolean?
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else null
        }
    val extendedPelvis : Boolean?
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else null
        }
    val extendedKnee : Boolean?
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else null
        }
    val forceArmsFromHmd : Boolean?
        get() {
            val o = __offset(10)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else null
        }
    val floorClip : Boolean?
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else null
        }
    val skatingCorrection : Boolean?
        get() {
            val o = __offset(14)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else null
        }
    val viveEmulation : Boolean?
        get() {
            val o = __offset(16)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else null
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        fun getRootAsModelToggles(_bb: ByteBuffer): ModelToggles = getRootAsModelToggles(_bb, ModelToggles())
        fun getRootAsModelToggles(_bb: ByteBuffer, obj: ModelToggles): ModelToggles {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createModelToggles(builder: FlatBufferBuilder, extendedSpine: Boolean?, extendedPelvis: Boolean?, extendedKnee: Boolean?, forceArmsFromHmd: Boolean?, floorClip: Boolean?, skatingCorrection: Boolean?, viveEmulation: Boolean?) : Int {
            builder.startTable(7)
            viveEmulation?.run { addViveEmulation(builder, viveEmulation) }
            skatingCorrection?.run { addSkatingCorrection(builder, skatingCorrection) }
            floorClip?.run { addFloorClip(builder, floorClip) }
            forceArmsFromHmd?.run { addForceArmsFromHmd(builder, forceArmsFromHmd) }
            extendedKnee?.run { addExtendedKnee(builder, extendedKnee) }
            extendedPelvis?.run { addExtendedPelvis(builder, extendedPelvis) }
            extendedSpine?.run { addExtendedSpine(builder, extendedSpine) }
            return endModelToggles(builder)
        }
        fun startModelToggles(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addExtendedSpine(builder: FlatBufferBuilder, extendedSpine: Boolean) = builder.addBoolean(0, extendedSpine, false)
        fun addExtendedPelvis(builder: FlatBufferBuilder, extendedPelvis: Boolean) = builder.addBoolean(1, extendedPelvis, false)
        fun addExtendedKnee(builder: FlatBufferBuilder, extendedKnee: Boolean) = builder.addBoolean(2, extendedKnee, false)
        fun addForceArmsFromHmd(builder: FlatBufferBuilder, forceArmsFromHmd: Boolean) = builder.addBoolean(3, forceArmsFromHmd, false)
        fun addFloorClip(builder: FlatBufferBuilder, floorClip: Boolean) = builder.addBoolean(4, floorClip, false)
        fun addSkatingCorrection(builder: FlatBufferBuilder, skatingCorrection: Boolean) = builder.addBoolean(5, skatingCorrection, false)
        fun addViveEmulation(builder: FlatBufferBuilder, viveEmulation: Boolean) = builder.addBoolean(6, viveEmulation, false)
        fun endModelToggles(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
