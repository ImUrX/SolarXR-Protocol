// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.firmware.commands;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CommandMessageHeader extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static CommandMessageHeader getRootAsCommandMessageHeader(ByteBuffer _bb) { return getRootAsCommandMessageHeader(_bb, new CommandMessageHeader()); }
  public static CommandMessageHeader getRootAsCommandMessageHeader(ByteBuffer _bb, CommandMessageHeader obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CommandMessageHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * For a request, this identifies the request. For a response, this corresponds
   * to the request that it is responding to.
   */
  public solarxr_protocol.datatypes.TransactionId txId() { return txId(new solarxr_protocol.datatypes.TransactionId()); }
  public solarxr_protocol.datatypes.TransactionId txId(solarxr_protocol.datatypes.TransactionId obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public byte messageType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table message(Table obj) { int o = __offset(8); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static void startCommandMessageHeader(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addTxId(FlatBufferBuilder builder, int txIdOffset) { builder.addStruct(0, txIdOffset, 0); }
  public static void addMessageType(FlatBufferBuilder builder, byte messageType) { builder.addByte(1, messageType, 0); }
  public static void addMessage(FlatBufferBuilder builder, int messageOffset) { builder.addOffset(2, messageOffset, 0); }
  public static int endCommandMessageHeader(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CommandMessageHeader get(int j) { return get(new CommandMessageHeader(), j); }
    public CommandMessageHeader get(CommandMessageHeader obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public CommandMessageHeaderT unpack() {
    CommandMessageHeaderT _o = new CommandMessageHeaderT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(CommandMessageHeaderT _o) {
    if (txId() != null) txId().unpackTo(_o.getTxId());
    else _o.setTxId(null);
    solarxr_protocol.firmware.commands.CommandMessageUnion _oMessage = new solarxr_protocol.firmware.commands.CommandMessageUnion();
    byte _oMessageType = messageType();
    _oMessage.setType(_oMessageType);
    Table _oMessageValue;
    switch (_oMessageType) {
      case solarxr_protocol.firmware.commands.CommandMessage.TapResponse:
        _oMessageValue = message(new solarxr_protocol.firmware.commands.TapResponse());
        _oMessage.setValue(_oMessageValue != null ? ((solarxr_protocol.firmware.commands.TapResponse) _oMessageValue).unpack() : null);
        break;
      default: break;
    }
    _o.setMessage(_oMessage);
  }
  public static int pack(FlatBufferBuilder builder, CommandMessageHeaderT _o) {
    if (_o == null) return 0;
    byte _messageType = _o.getMessage() == null ? solarxr_protocol.firmware.commands.CommandMessage.NONE : _o.getMessage().getType();
    int _message = _o.getMessage() == null ? 0 : solarxr_protocol.firmware.commands.CommandMessageUnion.pack(builder, _o.getMessage());
    startCommandMessageHeader(builder);
    addTxId(builder, solarxr_protocol.datatypes.TransactionId.pack(builder, _o.getTxId()));
    addMessageType(builder, _messageType);
    addMessage(builder, _message);
    return endCommandMessageHeader(builder);
  }
}

