// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.firmware.data_feed;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DataFeedUpdate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DataFeedUpdate getRootAsDataFeedUpdate(ByteBuffer _bb) { return getRootAsDataFeedUpdate(_bb, new DataFeedUpdate()); }
  public static DataFeedUpdate getRootAsDataFeedUpdate(ByteBuffer _bb, DataFeedUpdate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataFeedUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.firmware.data_feed.device_data.DeviceData devices(int j) { return devices(new solarxr_protocol.firmware.data_feed.device_data.DeviceData(), j); }
  public solarxr_protocol.firmware.data_feed.device_data.DeviceData devices(solarxr_protocol.firmware.data_feed.device_data.DeviceData obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int devicesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.firmware.data_feed.device_data.DeviceData.Vector devicesVector() { return devicesVector(new solarxr_protocol.firmware.data_feed.device_data.DeviceData.Vector()); }
  public solarxr_protocol.firmware.data_feed.device_data.DeviceData.Vector devicesVector(solarxr_protocol.firmware.data_feed.device_data.DeviceData.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDataFeedUpdate(FlatBufferBuilder builder,
      int devicesOffset) {
    builder.startTable(1);
    DataFeedUpdate.addDevices(builder, devicesOffset);
    return DataFeedUpdate.endDataFeedUpdate(builder);
  }

  public static void startDataFeedUpdate(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addDevices(FlatBufferBuilder builder, int devicesOffset) { builder.addOffset(0, devicesOffset, 0); }
  public static int createDevicesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDevicesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDataFeedUpdate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataFeedUpdate get(int j) { return get(new DataFeedUpdate(), j); }
    public DataFeedUpdate get(DataFeedUpdate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DataFeedUpdateT unpack() {
    DataFeedUpdateT _o = new DataFeedUpdateT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DataFeedUpdateT _o) {
    solarxr_protocol.firmware.data_feed.device_data.DeviceDataT[] _oDevices = new solarxr_protocol.firmware.data_feed.device_data.DeviceDataT[devicesLength()];
    for (int _j = 0; _j < devicesLength(); ++_j) {_oDevices[_j] = (devices(_j) != null ? devices(_j).unpack() : null);}
    _o.setDevices(_oDevices);
  }
  public static int pack(FlatBufferBuilder builder, DataFeedUpdateT _o) {
    if (_o == null) return 0;
    int _devices = 0;
    if (_o.getDevices() != null) {
      int[] __devices = new int[_o.getDevices().length];
      int _j = 0;
      for (solarxr_protocol.firmware.data_feed.device_data.DeviceDataT _e : _o.getDevices()) { __devices[_j] = solarxr_protocol.firmware.data_feed.device_data.DeviceData.pack(builder, _e); _j++;}
      _devices = createDevicesVector(builder, __devices);
    }
    return createDataFeedUpdate(
      builder,
      _devices);
  }
}

