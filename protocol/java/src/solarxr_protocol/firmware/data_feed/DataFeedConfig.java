// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.firmware.data_feed;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DataFeedConfig extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DataFeedConfig getRootAsDataFeedConfig(ByteBuffer _bb) { return getRootAsDataFeedConfig(_bb, new DataFeedConfig()); }
  public static DataFeedConfig getRootAsDataFeedConfig(ByteBuffer _bb, DataFeedConfig obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataFeedConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Minimum delay in milliseconds between new data updates. This value will be
   * ignored when used for a `PollDataFeed`.
   */
  public int minimumTimeSinceLast() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public solarxr_protocol.firmware.data_feed.device_data.DeviceDataMask dataMask() { return dataMask(new solarxr_protocol.firmware.data_feed.device_data.DeviceDataMask()); }
  public solarxr_protocol.firmware.data_feed.device_data.DeviceDataMask dataMask(solarxr_protocol.firmware.data_feed.device_data.DeviceDataMask obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createDataFeedConfig(FlatBufferBuilder builder,
      int minimumTimeSinceLast,
      int dataMaskOffset) {
    builder.startTable(2);
    DataFeedConfig.addDataMask(builder, dataMaskOffset);
    DataFeedConfig.addMinimumTimeSinceLast(builder, minimumTimeSinceLast);
    return DataFeedConfig.endDataFeedConfig(builder);
  }

  public static void startDataFeedConfig(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addMinimumTimeSinceLast(FlatBufferBuilder builder, int minimumTimeSinceLast) { builder.addShort(0, (short) minimumTimeSinceLast, (short) 0); }
  public static void addDataMask(FlatBufferBuilder builder, int dataMaskOffset) { builder.addOffset(1, dataMaskOffset, 0); }
  public static int endDataFeedConfig(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataFeedConfig get(int j) { return get(new DataFeedConfig(), j); }
    public DataFeedConfig get(DataFeedConfig obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DataFeedConfigT unpack() {
    DataFeedConfigT _o = new DataFeedConfigT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DataFeedConfigT _o) {
    int _oMinimumTimeSinceLast = minimumTimeSinceLast();
    _o.setMinimumTimeSinceLast(_oMinimumTimeSinceLast);
    if (dataMask() != null) _o.setDataMask(dataMask().unpack());
    else _o.setDataMask(null);
  }
  public static int pack(FlatBufferBuilder builder, DataFeedConfigT _o) {
    if (_o == null) return 0;
    int _dataMask = _o.getDataMask() == null ? 0 : solarxr_protocol.firmware.data_feed.device_data.DeviceDataMask.pack(builder, _o.getDataMask());
    return createDataFeedConfig(
      builder,
      _o.getMinimumTimeSinceLast(),
      _dataMask);
  }
}

