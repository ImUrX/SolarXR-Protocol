// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.device.pairing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DeviceSensorInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DeviceSensorInfo getRootAsDeviceSensorInfo(ByteBuffer _bb) { return getRootAsDeviceSensorInfo(_bb, new DeviceSensorInfo()); }
  public static DeviceSensorInfo getRootAsDeviceSensorInfo(ByteBuffer _bb, DeviceSensorInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DeviceSensorInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * If the ID is contained twice in the array,
   * only the first one will be used and the others will be ignÃ¶red.
   */
  public int id() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int type() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public solarxr_protocol.device.pairing.ImuFeatureInfo features(int j) { return features(new solarxr_protocol.device.pairing.ImuFeatureInfo(), j); }
  public solarxr_protocol.device.pairing.ImuFeatureInfo features(solarxr_protocol.device.pairing.ImuFeatureInfo obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int featuresLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.device.pairing.ImuFeatureInfo.Vector featuresVector() { return featuresVector(new solarxr_protocol.device.pairing.ImuFeatureInfo.Vector()); }
  public solarxr_protocol.device.pairing.ImuFeatureInfo.Vector featuresVector(solarxr_protocol.device.pairing.ImuFeatureInfo.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDeviceSensorInfo(FlatBufferBuilder builder,
      int id,
      int type,
      int featuresOffset) {
    builder.startTable(3);
    DeviceSensorInfo.addFeatures(builder, featuresOffset);
    DeviceSensorInfo.addType(builder, type);
    DeviceSensorInfo.addId(builder, id);
    return DeviceSensorInfo.endDeviceSensorInfo(builder);
  }

  public static void startDeviceSensorInfo(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addByte(0, (byte) id, (byte) 0); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addShort(1, (short) type, (short) 0); }
  public static void addFeatures(FlatBufferBuilder builder, int featuresOffset) { builder.addOffset(2, featuresOffset, 0); }
  public static int createFeaturesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFeaturesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDeviceSensorInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 8);  // features
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DeviceSensorInfo get(int j) { return get(new DeviceSensorInfo(), j); }
    public DeviceSensorInfo get(DeviceSensorInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DeviceSensorInfoT unpack() {
    DeviceSensorInfoT _o = new DeviceSensorInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DeviceSensorInfoT _o) {
    int _oId = id();
    _o.setId(_oId);
    int _oType = type();
    _o.setType(_oType);
    solarxr_protocol.device.pairing.ImuFeatureInfoT[] _oFeatures = new solarxr_protocol.device.pairing.ImuFeatureInfoT[featuresLength()];
    for (int _j = 0; _j < featuresLength(); ++_j) {_oFeatures[_j] = (features(_j) != null ? features(_j).unpack() : null);}
    _o.setFeatures(_oFeatures);
  }
  public static int pack(FlatBufferBuilder builder, DeviceSensorInfoT _o) {
    if (_o == null) return 0;
    int _features = 0;
    if (_o.getFeatures() != null) {
      int[] __features = new int[_o.getFeatures().length];
      int _j = 0;
      for (solarxr_protocol.device.pairing.ImuFeatureInfoT _e : _o.getFeatures()) { __features[_j] = solarxr_protocol.device.pairing.ImuFeatureInfo.pack(builder, _e); _j++;}
      _features = createFeaturesVector(builder, __features);
    }
    return createDeviceSensorInfo(
      builder,
      _o.getId(),
      _o.getType(),
      _features);
  }
}

