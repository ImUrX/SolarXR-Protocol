// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.device.pairing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DeviceFeatures extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DeviceFeatures getRootAsDeviceFeatures(ByteBuffer _bb) { return getRootAsDeviceFeatures(_bb, new DeviceFeatures()); }
  public static DeviceFeatures getRootAsDeviceFeatures(ByteBuffer _bb, DeviceFeatures obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DeviceFeatures __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean gyroscopeCalibration() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean accelerometerCalibration() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean magnetometerCalibration() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createDeviceFeatures(FlatBufferBuilder builder,
      boolean gyroscopeCalibration,
      boolean accelerometerCalibration,
      boolean magnetometerCalibration) {
    builder.startTable(3);
    DeviceFeatures.addMagnetometerCalibration(builder, magnetometerCalibration);
    DeviceFeatures.addAccelerometerCalibration(builder, accelerometerCalibration);
    DeviceFeatures.addGyroscopeCalibration(builder, gyroscopeCalibration);
    return DeviceFeatures.endDeviceFeatures(builder);
  }

  public static void startDeviceFeatures(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addGyroscopeCalibration(FlatBufferBuilder builder, boolean gyroscopeCalibration) { builder.addBoolean(0, gyroscopeCalibration, false); }
  public static void addAccelerometerCalibration(FlatBufferBuilder builder, boolean accelerometerCalibration) { builder.addBoolean(1, accelerometerCalibration, false); }
  public static void addMagnetometerCalibration(FlatBufferBuilder builder, boolean magnetometerCalibration) { builder.addBoolean(2, magnetometerCalibration, false); }
  public static int endDeviceFeatures(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DeviceFeatures get(int j) { return get(new DeviceFeatures(), j); }
    public DeviceFeatures get(DeviceFeatures obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DeviceFeaturesT unpack() {
    DeviceFeaturesT _o = new DeviceFeaturesT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DeviceFeaturesT _o) {
    boolean _oGyroscopeCalibration = gyroscopeCalibration();
    _o.setGyroscopeCalibration(_oGyroscopeCalibration);
    boolean _oAccelerometerCalibration = accelerometerCalibration();
    _o.setAccelerometerCalibration(_oAccelerometerCalibration);
    boolean _oMagnetometerCalibration = magnetometerCalibration();
    _o.setMagnetometerCalibration(_oMagnetometerCalibration);
  }
  public static int pack(FlatBufferBuilder builder, DeviceFeaturesT _o) {
    if (_o == null) return 0;
    return createDeviceFeatures(
      builder,
      _o.getGyroscopeCalibration(),
      _o.getAccelerometerCalibration(),
      _o.getMagnetometerCalibration());
  }
}

