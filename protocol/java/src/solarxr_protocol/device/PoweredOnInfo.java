// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.device;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * This packet is a standalone broadcasted packet that is sent by the device into the network.
 * It is used for servers to discover this device.
 */
@SuppressWarnings("unused")
public final class PoweredOnInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PoweredOnInfo getRootAsPoweredOnInfo(ByteBuffer _bb) { return getRootAsPoweredOnInfo(_bb, new PoweredOnInfo()); }
  public static PoweredOnInfo getRootAsPoweredOnInfo(ByteBuffer _bb, PoweredOnInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PoweredOnInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Some hardware information about the device.
   */
  public solarxr_protocol.datatypes.hardware_info.HardwareInfo hardwareInfo() { return hardwareInfo(new solarxr_protocol.datatypes.hardware_info.HardwareInfo()); }
  public solarxr_protocol.datatypes.hardware_info.HardwareInfo hardwareInfo(solarxr_protocol.datatypes.hardware_info.HardwareInfo obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createPoweredOnInfo(FlatBufferBuilder builder,
      int hardwareInfoOffset) {
    builder.startTable(1);
    PoweredOnInfo.addHardwareInfo(builder, hardwareInfoOffset);
    return PoweredOnInfo.endPoweredOnInfo(builder);
  }

  public static void startPoweredOnInfo(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addHardwareInfo(FlatBufferBuilder builder, int hardwareInfoOffset) { builder.addOffset(0, hardwareInfoOffset, 0); }
  public static int endPoweredOnInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PoweredOnInfo get(int j) { return get(new PoweredOnInfo(), j); }
    public PoweredOnInfo get(PoweredOnInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PoweredOnInfoT unpack() {
    PoweredOnInfoT _o = new PoweredOnInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PoweredOnInfoT _o) {
    if (hardwareInfo() != null) _o.setHardwareInfo(hardwareInfo().unpack());
    else _o.setHardwareInfo(null);
  }
  public static int pack(FlatBufferBuilder builder, PoweredOnInfoT _o) {
    if (_o == null) return 0;
    int _hardwareInfo = _o.getHardwareInfo() == null ? 0 : solarxr_protocol.datatypes.hardware_info.HardwareInfo.pack(builder, _o.getHardwareInfo());
    return createPoweredOnInfo(
      builder,
      _hardwareInfo);
  }
}

