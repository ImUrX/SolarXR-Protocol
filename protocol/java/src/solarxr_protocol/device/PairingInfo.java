// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.device;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PairingInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PairingInfo getRootAsPairingInfo(ByteBuffer _bb) { return getRootAsPairingInfo(_bb, new PairingInfo()); }
  public static PairingInfo getRootAsPairingInfo(ByteBuffer _bb, PairingInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PairingInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean paired() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createPairingInfo(FlatBufferBuilder builder,
      boolean paired) {
    builder.startTable(1);
    PairingInfo.addPaired(builder, paired);
    return PairingInfo.endPairingInfo(builder);
  }

  public static void startPairingInfo(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addPaired(FlatBufferBuilder builder, boolean paired) { builder.addBoolean(0, paired, false); }
  public static int endPairingInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PairingInfo get(int j) { return get(new PairingInfo(), j); }
    public PairingInfo get(PairingInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PairingInfoT unpack() {
    PairingInfoT _o = new PairingInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PairingInfoT _o) {
    boolean _oPaired = paired();
    _o.setPaired(_oPaired);
  }
  public static int pack(FlatBufferBuilder builder, PairingInfoT _o) {
    if (_o == null) return 0;
    return createPairingInfo(
      builder,
      _o.getPaired());
  }
}

