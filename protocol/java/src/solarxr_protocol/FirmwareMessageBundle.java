// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FirmwareMessageBundle extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FirmwareMessageBundle getRootAsFirmwareMessageBundle(ByteBuffer _bb) { return getRootAsFirmwareMessageBundle(_bb, new FirmwareMessageBundle()); }
  public static FirmwareMessageBundle getRootAsFirmwareMessageBundle(ByteBuffer _bb, FirmwareMessageBundle obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FirmwareMessageBundle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.firmware.data_feed.DataFeedMessageHeader dataFeedMsgs(int j) { return dataFeedMsgs(new solarxr_protocol.firmware.data_feed.DataFeedMessageHeader(), j); }
  public solarxr_protocol.firmware.data_feed.DataFeedMessageHeader dataFeedMsgs(solarxr_protocol.firmware.data_feed.DataFeedMessageHeader obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int dataFeedMsgsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.firmware.data_feed.DataFeedMessageHeader.Vector dataFeedMsgsVector() { return dataFeedMsgsVector(new solarxr_protocol.firmware.data_feed.DataFeedMessageHeader.Vector()); }
  public solarxr_protocol.firmware.data_feed.DataFeedMessageHeader.Vector dataFeedMsgsVector(solarxr_protocol.firmware.data_feed.DataFeedMessageHeader.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public solarxr_protocol.firmware.commands.CommandMessageHeader commandsMsgs(int j) { return commandsMsgs(new solarxr_protocol.firmware.commands.CommandMessageHeader(), j); }
  public solarxr_protocol.firmware.commands.CommandMessageHeader commandsMsgs(solarxr_protocol.firmware.commands.CommandMessageHeader obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int commandsMsgsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.firmware.commands.CommandMessageHeader.Vector commandsMsgsVector() { return commandsMsgsVector(new solarxr_protocol.firmware.commands.CommandMessageHeader.Vector()); }
  public solarxr_protocol.firmware.commands.CommandMessageHeader.Vector commandsMsgsVector(solarxr_protocol.firmware.commands.CommandMessageHeader.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createFirmwareMessageBundle(FlatBufferBuilder builder,
      int dataFeedMsgsOffset,
      int commandsMsgsOffset) {
    builder.startTable(2);
    FirmwareMessageBundle.addCommandsMsgs(builder, commandsMsgsOffset);
    FirmwareMessageBundle.addDataFeedMsgs(builder, dataFeedMsgsOffset);
    return FirmwareMessageBundle.endFirmwareMessageBundle(builder);
  }

  public static void startFirmwareMessageBundle(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addDataFeedMsgs(FlatBufferBuilder builder, int dataFeedMsgsOffset) { builder.addOffset(0, dataFeedMsgsOffset, 0); }
  public static int createDataFeedMsgsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDataFeedMsgsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCommandsMsgs(FlatBufferBuilder builder, int commandsMsgsOffset) { builder.addOffset(1, commandsMsgsOffset, 0); }
  public static int createCommandsMsgsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCommandsMsgsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFirmwareMessageBundle(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FirmwareMessageBundle get(int j) { return get(new FirmwareMessageBundle(), j); }
    public FirmwareMessageBundle get(FirmwareMessageBundle obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FirmwareMessageBundleT unpack() {
    FirmwareMessageBundleT _o = new FirmwareMessageBundleT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FirmwareMessageBundleT _o) {
    solarxr_protocol.firmware.data_feed.DataFeedMessageHeaderT[] _oDataFeedMsgs = new solarxr_protocol.firmware.data_feed.DataFeedMessageHeaderT[dataFeedMsgsLength()];
    for (int _j = 0; _j < dataFeedMsgsLength(); ++_j) {_oDataFeedMsgs[_j] = (dataFeedMsgs(_j) != null ? dataFeedMsgs(_j).unpack() : null);}
    _o.setDataFeedMsgs(_oDataFeedMsgs);
    solarxr_protocol.firmware.commands.CommandMessageHeaderT[] _oCommandsMsgs = new solarxr_protocol.firmware.commands.CommandMessageHeaderT[commandsMsgsLength()];
    for (int _j = 0; _j < commandsMsgsLength(); ++_j) {_oCommandsMsgs[_j] = (commandsMsgs(_j) != null ? commandsMsgs(_j).unpack() : null);}
    _o.setCommandsMsgs(_oCommandsMsgs);
  }
  public static int pack(FlatBufferBuilder builder, FirmwareMessageBundleT _o) {
    if (_o == null) return 0;
    int _dataFeedMsgs = 0;
    if (_o.getDataFeedMsgs() != null) {
      int[] __dataFeedMsgs = new int[_o.getDataFeedMsgs().length];
      int _j = 0;
      for (solarxr_protocol.firmware.data_feed.DataFeedMessageHeaderT _e : _o.getDataFeedMsgs()) { __dataFeedMsgs[_j] = solarxr_protocol.firmware.data_feed.DataFeedMessageHeader.pack(builder, _e); _j++;}
      _dataFeedMsgs = createDataFeedMsgsVector(builder, __dataFeedMsgs);
    }
    int _commandsMsgs = 0;
    if (_o.getCommandsMsgs() != null) {
      int[] __commandsMsgs = new int[_o.getCommandsMsgs().length];
      int _j = 0;
      for (solarxr_protocol.firmware.commands.CommandMessageHeaderT _e : _o.getCommandsMsgs()) { __commandsMsgs[_j] = solarxr_protocol.firmware.commands.CommandMessageHeader.pack(builder, _e); _j++;}
      _commandsMsgs = createCommandsMsgsVector(builder, __commandsMsgs);
    }
    return createFirmwareMessageBundle(
      builder,
      _dataFeedMsgs,
      _commandsMsgs);
  }
}

