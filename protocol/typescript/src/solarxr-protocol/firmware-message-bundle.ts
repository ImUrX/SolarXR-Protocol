// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CommandMessageHeader, CommandMessageHeaderT } from '../solarxr-protocol/firmware/commands/command-message-header';
import { DataFeedMessageHeader, DataFeedMessageHeaderT } from '../solarxr-protocol/firmware/data-feed/data-feed-message-header';


export class FirmwareMessageBundle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FirmwareMessageBundle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFirmwareMessageBundle(bb:flatbuffers.ByteBuffer, obj?:FirmwareMessageBundle):FirmwareMessageBundle {
  return (obj || new FirmwareMessageBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFirmwareMessageBundle(bb:flatbuffers.ByteBuffer, obj?:FirmwareMessageBundle):FirmwareMessageBundle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FirmwareMessageBundle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dataFeedMsgs(index: number, obj?:DataFeedMessageHeader):DataFeedMessageHeader|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DataFeedMessageHeader()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dataFeedMsgsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

commandsMsgs(index: number, obj?:CommandMessageHeader):CommandMessageHeader|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new CommandMessageHeader()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

commandsMsgsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFirmwareMessageBundle(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDataFeedMsgs(builder:flatbuffers.Builder, dataFeedMsgsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dataFeedMsgsOffset, 0);
}

static createDataFeedMsgsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDataFeedMsgsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCommandsMsgs(builder:flatbuffers.Builder, commandsMsgsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, commandsMsgsOffset, 0);
}

static createCommandsMsgsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommandsMsgsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFirmwareMessageBundle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFirmwareMessageBundle(builder:flatbuffers.Builder, dataFeedMsgsOffset:flatbuffers.Offset, commandsMsgsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FirmwareMessageBundle.startFirmwareMessageBundle(builder);
  FirmwareMessageBundle.addDataFeedMsgs(builder, dataFeedMsgsOffset);
  FirmwareMessageBundle.addCommandsMsgs(builder, commandsMsgsOffset);
  return FirmwareMessageBundle.endFirmwareMessageBundle(builder);
}

unpack(): FirmwareMessageBundleT {
  return new FirmwareMessageBundleT(
    this.bb!.createObjList(this.dataFeedMsgs.bind(this), this.dataFeedMsgsLength()),
    this.bb!.createObjList(this.commandsMsgs.bind(this), this.commandsMsgsLength())
  );
}


unpackTo(_o: FirmwareMessageBundleT): void {
  _o.dataFeedMsgs = this.bb!.createObjList(this.dataFeedMsgs.bind(this), this.dataFeedMsgsLength());
  _o.commandsMsgs = this.bb!.createObjList(this.commandsMsgs.bind(this), this.commandsMsgsLength());
}
}

export class FirmwareMessageBundleT {
constructor(
  public dataFeedMsgs: (DataFeedMessageHeaderT)[] = [],
  public commandsMsgs: (CommandMessageHeaderT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const dataFeedMsgs = FirmwareMessageBundle.createDataFeedMsgsVector(builder, builder.createObjectOffsetList(this.dataFeedMsgs));
  const commandsMsgs = FirmwareMessageBundle.createCommandsMsgsVector(builder, builder.createObjectOffsetList(this.commandsMsgs));

  return FirmwareMessageBundle.createFirmwareMessageBundle(builder,
    dataFeedMsgs,
    commandsMsgs
  );
}
}
