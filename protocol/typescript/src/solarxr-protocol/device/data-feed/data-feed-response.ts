// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DeviceData, DeviceDataT } from '../../../solarxr-protocol/device/data-feed/device-data/device-data';


export class DataFeedResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DataFeedResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataFeedResponse(bb:flatbuffers.ByteBuffer, obj?:DataFeedResponse):DataFeedResponse {
  return (obj || new DataFeedResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataFeedResponse(bb:flatbuffers.ByteBuffer, obj?:DataFeedResponse):DataFeedResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataFeedResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

devices(index: number, obj?:DeviceData):DeviceData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DeviceData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

devicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDataFeedResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDevices(builder:flatbuffers.Builder, devicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, devicesOffset, 0);
}

static createDevicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDevicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDataFeedResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDataFeedResponse(builder:flatbuffers.Builder, devicesOffset:flatbuffers.Offset):flatbuffers.Offset {
  DataFeedResponse.startDataFeedResponse(builder);
  DataFeedResponse.addDevices(builder, devicesOffset);
  return DataFeedResponse.endDataFeedResponse(builder);
}

unpack(): DataFeedResponseT {
  return new DataFeedResponseT(
    this.bb!.createObjList(this.devices.bind(this), this.devicesLength())
  );
}


unpackTo(_o: DataFeedResponseT): void {
  _o.devices = this.bb!.createObjList(this.devices.bind(this), this.devicesLength());
}
}

export class DataFeedResponseT {
constructor(
  public devices: (DeviceDataT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const devices = DataFeedResponse.createDevicesVector(builder, builder.createObjectOffsetList(this.devices));

  return DataFeedResponse.createDataFeedResponse(builder,
    devices
  );
}
}
