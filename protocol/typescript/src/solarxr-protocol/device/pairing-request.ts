// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * This packet is a standalone broadcasted packet that is sent by the device into the network.
 * It is used for servers to discover this device.
 */
export class PairingRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PairingRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPairingRequest(bb:flatbuffers.ByteBuffer, obj?:PairingRequest):PairingRequest {
  return (obj || new PairingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPairingRequest(bb:flatbuffers.ByteBuffer, obj?:PairingRequest):PairingRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PairingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startPairingRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endPairingRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPairingRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  PairingRequest.startPairingRequest(builder);
  return PairingRequest.endPairingRequest(builder);
}

unpack(): PairingRequestT {
  return new PairingRequestT();
}


unpackTo(_o: PairingRequestT): void {}
}

export class PairingRequestT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return PairingRequest.createPairingRequest(builder);
}
}
