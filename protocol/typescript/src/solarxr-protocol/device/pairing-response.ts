// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class PairingResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PairingResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPairingResponse(bb:flatbuffers.ByteBuffer, obj?:PairingResponse):PairingResponse {
  return (obj || new PairingResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPairingResponse(bb:flatbuffers.ByteBuffer, obj?:PairingResponse):PairingResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PairingResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

error():string|null
error(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
error(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPairingResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, errorOffset, 0);
}

static endPairingResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPairingResponse(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset):flatbuffers.Offset {
  PairingResponse.startPairingResponse(builder);
  PairingResponse.addError(builder, errorOffset);
  return PairingResponse.endPairingResponse(builder);
}

unpack(): PairingResponseT {
  return new PairingResponseT(
    this.error()
  );
}


unpackTo(_o: PairingResponseT): void {
  _o.error = this.error();
}
}

export class PairingResponseT {
constructor(
  public error: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const error = (this.error !== null ? builder.createString(this.error!) : 0);

  return PairingResponse.createPairingResponse(builder,
    error
  );
}
}
