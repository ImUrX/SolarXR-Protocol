// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DeviceFeatures, DeviceFeaturesT } from '../../../solarxr-protocol/device/pairing/device-features';


/**
 * Broadcast by the device on startup to tell servers what this device supports,
 * and if it's already paired (i.e. if the server should show the popup).
 */
export class PairingInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PairingInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPairingInfo(bb:flatbuffers.ByteBuffer, obj?:PairingInfo):PairingInfo {
  return (obj || new PairingInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPairingInfo(bb:flatbuffers.ByteBuffer, obj?:PairingInfo):PairingInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PairingInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * If this tracker isn't paired to any server, this field should be `0`.
 */
pairedTo():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

displayName():string|null
displayName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
displayName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

model():string|null
model(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
model(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

manufacturer():string|null
manufacturer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manufacturer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

firmwareVersion():string|null
firmwareVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
firmwareVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

features(index: number, obj?:DeviceFeatures):DeviceFeatures|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new DeviceFeatures()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

featuresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPairingInfo(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addPairedTo(builder:flatbuffers.Builder, pairedTo:number) {
  builder.addFieldInt32(0, pairedTo, 0);
}

static addDisplayName(builder:flatbuffers.Builder, displayNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, displayNameOffset, 0);
}

static addModel(builder:flatbuffers.Builder, modelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, modelOffset, 0);
}

static addManufacturer(builder:flatbuffers.Builder, manufacturerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, manufacturerOffset, 0);
}

static addFirmwareVersion(builder:flatbuffers.Builder, firmwareVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, firmwareVersionOffset, 0);
}

static addFeatures(builder:flatbuffers.Builder, featuresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, featuresOffset, 0);
}

static createFeaturesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFeaturesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPairingInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // display_name
  builder.requiredField(offset, 8) // model
  builder.requiredField(offset, 10) // manufacturer
  builder.requiredField(offset, 12) // firmware_version
  builder.requiredField(offset, 14) // features
  return offset;
}

static createPairingInfo(builder:flatbuffers.Builder, pairedTo:number, displayNameOffset:flatbuffers.Offset, modelOffset:flatbuffers.Offset, manufacturerOffset:flatbuffers.Offset, firmwareVersionOffset:flatbuffers.Offset, featuresOffset:flatbuffers.Offset):flatbuffers.Offset {
  PairingInfo.startPairingInfo(builder);
  PairingInfo.addPairedTo(builder, pairedTo);
  PairingInfo.addDisplayName(builder, displayNameOffset);
  PairingInfo.addModel(builder, modelOffset);
  PairingInfo.addManufacturer(builder, manufacturerOffset);
  PairingInfo.addFirmwareVersion(builder, firmwareVersionOffset);
  PairingInfo.addFeatures(builder, featuresOffset);
  return PairingInfo.endPairingInfo(builder);
}

unpack(): PairingInfoT {
  return new PairingInfoT(
    this.pairedTo(),
    this.displayName(),
    this.model(),
    this.manufacturer(),
    this.firmwareVersion(),
    this.bb!.createObjList(this.features.bind(this), this.featuresLength())
  );
}


unpackTo(_o: PairingInfoT): void {
  _o.pairedTo = this.pairedTo();
  _o.displayName = this.displayName();
  _o.model = this.model();
  _o.manufacturer = this.manufacturer();
  _o.firmwareVersion = this.firmwareVersion();
  _o.features = this.bb!.createObjList(this.features.bind(this), this.featuresLength());
}
}

export class PairingInfoT {
constructor(
  public pairedTo: number = 0,
  public displayName: string|Uint8Array|null = null,
  public model: string|Uint8Array|null = null,
  public manufacturer: string|Uint8Array|null = null,
  public firmwareVersion: string|Uint8Array|null = null,
  public features: (DeviceFeaturesT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const displayName = (this.displayName !== null ? builder.createString(this.displayName!) : 0);
  const model = (this.model !== null ? builder.createString(this.model!) : 0);
  const manufacturer = (this.manufacturer !== null ? builder.createString(this.manufacturer!) : 0);
  const firmwareVersion = (this.firmwareVersion !== null ? builder.createString(this.firmwareVersion!) : 0);
  const features = PairingInfo.createFeaturesVector(builder, builder.createObjectOffsetList(this.features));

  return PairingInfo.createPairingInfo(builder,
    this.pairedTo,
    displayName,
    model,
    manufacturer,
    firmwareVersion,
    features
  );
}
}
