// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { HardwareInfo, HardwareInfoT } from '../../solarxr-protocol/datatypes/hardware-info/hardware-info';


/**
 * This packet is a standalone broadcasted packet that is sent by the device into the network.
 * It is used for servers to discover this device.
 */
export class PoweredOnInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PoweredOnInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPoweredOnInfo(bb:flatbuffers.ByteBuffer, obj?:PoweredOnInfo):PoweredOnInfo {
  return (obj || new PoweredOnInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPoweredOnInfo(bb:flatbuffers.ByteBuffer, obj?:PoweredOnInfo):PoweredOnInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PoweredOnInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Some hardware information about the device.
 */
hardwareInfo(obj?:HardwareInfo):HardwareInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new HardwareInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPoweredOnInfo(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addHardwareInfo(builder:flatbuffers.Builder, hardwareInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, hardwareInfoOffset, 0);
}

static endPoweredOnInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPoweredOnInfo(builder:flatbuffers.Builder, hardwareInfoOffset:flatbuffers.Offset):flatbuffers.Offset {
  PoweredOnInfo.startPoweredOnInfo(builder);
  PoweredOnInfo.addHardwareInfo(builder, hardwareInfoOffset);
  return PoweredOnInfo.endPoweredOnInfo(builder);
}

unpack(): PoweredOnInfoT {
  return new PoweredOnInfoT(
    (this.hardwareInfo() !== null ? this.hardwareInfo()!.unpack() : null)
  );
}


unpackTo(_o: PoweredOnInfoT): void {
  _o.hardwareInfo = (this.hardwareInfo() !== null ? this.hardwareInfo()!.unpack() : null);
}
}

export class PoweredOnInfoT {
constructor(
  public hardwareInfo: HardwareInfoT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const hardwareInfo = (this.hardwareInfo !== null ? this.hardwareInfo!.pack(builder) : 0);

  return PoweredOnInfo.createPoweredOnInfo(builder,
    hardwareInfo
  );
}
}
